// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Diagnostico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicoId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Diagnostico", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Enfermedad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Riesgo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Enfermedad", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Funcion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Funcion", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantTrabajadores")
                        .HasColumnType("int");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Especialidades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Localizacion")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospital", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FuncionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("HorasDia")
                        .HasColumnType("time");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FuncionId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Motivo")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.PacienteEnfermedad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnfermedadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnfermedadId");

                    b.HasIndex("PacienteId");

                    b.ToTable("PacienteEnfermedad", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Persona", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("P_Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("S_Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Tratamiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Dias")
                        .HasColumnType("int");

                    b.Property<Guid>("EnfermedadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnfermedadId");

                    b.ToTable("Tratamiento", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.TratamientoDiagnostico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiagnosticoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TratamientoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoId");

                    b.HasIndex("TratamientoId");

                    b.ToTable("TratamientoDiagnostico", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Area", b =>
                {
                    b.HasOne("Infrastructure.Entities.Hospital", "Hospital")
                        .WithMany("Areas")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Infrastructure.Entities.Diagnostico", b =>
                {
                    b.HasOne("Infrastructure.Entities.Medico", "Medico")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Paciente", "Paciente")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Infrastructure.Entities.Enfermedad", b =>
                {
                    b.HasOne("Infrastructure.Entities.Area", "Area")
                        .WithMany("Enfermedades")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Infrastructure.Entities.Funcion", b =>
                {
                    b.HasOne("Infrastructure.Entities.Area", "Area")
                        .WithMany("Funcions")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Infrastructure.Entities.Medico", b =>
                {
                    b.HasOne("Infrastructure.Entities.Funcion", "Funcion")
                        .WithMany()
                        .HasForeignKey("FuncionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Hospital", "Hospital")
                        .WithMany("Medicos")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Persona", "Persona")
                        .WithMany("Medicos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcion");

                    b.Navigation("Hospital");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Infrastructure.Entities.Paciente", b =>
                {
                    b.HasOne("Infrastructure.Entities.Hospital", "Hospital")
                        .WithMany("Pacientes")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Persona", "Persona")
                        .WithMany("Pacientes")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Infrastructure.Entities.PacienteEnfermedad", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enfermedad", "Enfermedad")
                        .WithMany()
                        .HasForeignKey("EnfermedadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Paciente", "Paciente")
                        .WithMany("PacienteEnfermedads")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enfermedad");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Infrastructure.Entities.Tratamiento", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enfermedad", "Enfermedad")
                        .WithMany("Tratamientos")
                        .HasForeignKey("EnfermedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enfermedad");
                });

            modelBuilder.Entity("Infrastructure.Entities.TratamientoDiagnostico", b =>
                {
                    b.HasOne("Infrastructure.Entities.Diagnostico", "Diagnostico")
                        .WithMany()
                        .HasForeignKey("DiagnosticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Tratamiento", "Tratamiento")
                        .WithMany()
                        .HasForeignKey("TratamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Tratamiento");
                });

            modelBuilder.Entity("Infrastructure.Entities.Area", b =>
                {
                    b.Navigation("Enfermedades");

                    b.Navigation("Funcions");
                });

            modelBuilder.Entity("Infrastructure.Entities.Enfermedad", b =>
                {
                    b.Navigation("Tratamientos");
                });

            modelBuilder.Entity("Infrastructure.Entities.Hospital", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Medicos");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Infrastructure.Entities.Medico", b =>
                {
                    b.Navigation("Diagnosticos");
                });

            modelBuilder.Entity("Infrastructure.Entities.Paciente", b =>
                {
                    b.Navigation("Diagnosticos");

                    b.Navigation("PacienteEnfermedads");
                });

            modelBuilder.Entity("Infrastructure.Entities.Persona", b =>
                {
                    b.Navigation("Medicos");

                    b.Navigation("Pacientes");
                });
#pragma warning restore 612, 618
        }
    }
}
